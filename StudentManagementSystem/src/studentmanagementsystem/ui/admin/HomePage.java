/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package studentmanagementsystem.ui.admin;

import studentmanagementsystem.ui.forms.AdminRegistrationForm;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import studentmanagementsystem.service.Services;
import studentmanagementsystem.model.Student;
import studentmanagementsystem.ui.UiController;
import studentmanagementsystem.ui.forms.StudentRegistrationForm;
import studentmanagementsystem.ui.student.AboutPage;
/**
 *
 * @author vivek
 */

public class HomePage extends javax.swing.JFrame {
    
    /**
     * Creates new form Home
     */
    public HomePage() {

        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setLocationRelativeTo(null);
    }
    private List<Student> studentsRecord = Services.getService().getAllStudentsRecord();
    public void displayRecords(List<Student> records) {
    if(records.isEmpty()){
        JOptionPane.showMessageDialog(null,"No Record Found");
        return;
    }
    try{
           // Get the table model from the studentTable
    DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
    // Clear existing rows in the table model
    model.setRowCount(0);
    // Iterate through the list of students and add each one to the table model
    for (Student s : records) {
        model.addRow(new Object[]{
            s.getId(),
            s.getStudentName(),
            s.getStudentMobileNo(),
            s.getEmail(), // Assuming you have an email field in the Student class
            s.getTotalLeave() // Assuming you have a totalLeave field in the Student class
        });
    } 
    }catch(NullPointerException e){
        JOptionPane.showMessageDialog(null,"No Record Found");
    }
    }
         
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        searchType = new javax.swing.JComboBox<>();
        search = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        sortBy = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        logOut = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        searchType.setBackground(new java.awt.Color(242, 242, 242));
        searchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Id" }));
        searchType.setBorder(javax.swing.BorderFactory.createTitledBorder("SearchType"));
        searchType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchTypeItemStateChanged(evt);
            }
        });
        searchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(242, 242, 242));
        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/loupe.png"))); // NOI18N
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
        });

        searchInput.setBackground(new java.awt.Color(242, 242, 242));
        searchInput.setBorder(javax.swing.BorderFactory.createTitledBorder("SearchBar"));
        searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInputActionPerformed(evt);
            }
        });

        sortBy.setBackground(new java.awt.Color(242, 242, 242));
        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Active", "Complete", "Disqualified", "InProgress", "Name(Ascending)", "Name(Decending)", "Id(Ascending)", "Id(Decending)", "Total_Leave(Lowest)", "Total_Leave(Highest)" }));
        sortBy.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        sortBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortByItemStateChanged(evt);
            }
        });
        sortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/refresh.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(searchType, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(searchInput, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(search)
                            .addComponent(searchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        studentTable.setBackground(new java.awt.Color(242, 242, 242));
        studentTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        studentTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "MobileNo", "Email", "Total_Leave"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        studentTable.getTableHeader().setReorderingAllowed(false);
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);
        studentTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jMenu1.setText("File");

        logOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/logout.png"))); // NOI18N
        logOut.setText("Logout");
        logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutActionPerformed(evt);
            }
        });
        jMenu1.add(logOut);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/about.png"))); // NOI18N
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Registration");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/AddStudent.png"))); // NOI18N
        jMenuItem1.setText("add Student");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project Image/addAdmin.png"))); // NOI18N
        jMenuItem2.setText("add Admin");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuItem4.setText("add course");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new StudentRegistrationForm(this).setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        UiController.getAdminLogin().setVisible(true);
    }//GEN-LAST:event_logOutActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        
        if(searchInput.getText().isBlank()) {
            
            JOptionPane.showMessageDialog(null, "Input Field is empty");
            return;
            
        }
        if(((String)searchType.getSelectedItem()).equalsIgnoreCase("Name")) {
            studentsRecord = Services.getService().getAllStudentRecordByName(searchInput.getText());
            displayRecords(studentsRecord);
        } else {
            try{
                int id = Integer.parseInt(searchInput.getText());
                studentsRecord = Services.getService().getAllStudentRecordById(id);
                displayRecords(studentsRecord);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Search Type is id please put number value");
            }catch(Exception ee){
                JOptionPane.showMessageDialog(null, ee);
            }
        }
        
    }//GEN-LAST:event_searchActionPerformed

    private void searchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTypeActionPerformed

    private void searchTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchTypeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTypeItemStateChanged

    private void sortByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortByActionPerformed

    private void sortByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortByItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            String n = (String)sortBy.getSelectedItem();
            List<Student> students = new ArrayList(studentsRecord);
            switch (n) {
                case "Name(Ascending)" -> {
                    students.sort(Comparator.comparing(Student::getStudentName));
                    displayRecords(students);
                }
                case "Name(Decending)" ->{
                    students.sort(Comparator.comparing(Student::getStudentName).reversed());
                    displayRecords(students);
                }
                case "Id(Ascending)" -> {
                    students.sort(Comparator.comparingInt(Student::getId));
                    displayRecords(students);
                }
                case "Id(Decending)" -> {
                    students.sort(Comparator.comparingInt(Student::getId).reversed());
                    displayRecords(students);
                }
                case "Total_Leave(Ascending)" -> {
                    students.sort(Comparator.comparingInt(Student::getTotalLeave));
                    displayRecords(students);
                }
                case "Total_Leave(Decending)" -> {
                    students.sort(Comparator.comparingInt(Student::getTotalLeave).reversed());
                    displayRecords(students);
                }case "Active" -> {
                   displayRecords( students.stream().filter(student-> student.getStatus().equalsIgnoreCase("active")).collect(Collectors.toList()));
                }
                case "Complete"->{
                    displayRecords(students.stream().filter(student->student.getStatus().equalsIgnoreCase("Complete")).collect(Collectors.toList()));
                }
                case "Disqualified" -> {
                    displayRecords(students.stream().filter(student->student.getStatus().equalsIgnoreCase("disqualified")).collect(Collectors.toList()));
                }
                case "InProgress" ->{
                    displayRecords(students.stream().filter(student->student.getStatus().equalsIgnoreCase("inProgress")).collect(Collectors.toList()));
                }
                default -> {
                    displayRecords(studentsRecord);
                }
            }
        }
    }//GEN-LAST:event_sortByItemStateChanged

    private void searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchInputActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here
                // Check for double click (Click count == 2)
                if (evt.getClickCount() == 2) {
                    // Get the selected row
                    int selectedRow = studentTable.getSelectedRow();
                    
                    // Retrieve data from the selected row (e.g., "Name" column)
                    int id = Integer.parseInt(studentTable.getValueAt(selectedRow,0).toString());
                    Optional<Student> studentOptional = studentsRecord.stream().filter(s->s.getId()==id).findFirst();
                    if (studentOptional.isPresent()) {
                        Student student = studentOptional.get();
                        StudentDetail object = new StudentDetail();
                        setVisible(false);
                        object.setVisible(true);
                        object.showDetail(student);
                    }
                }
    }//GEN-LAST:event_studentTableMouseClicked

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        displayRecords(Services.getService().getAllStudentsRecord());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(() -> {
            new AdminRegistrationForm().setVisible(true);
        });
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
                java.awt.EventQueue.invokeLater(() -> {
           BatchForm obj =  new BatchForm();
           obj.setModal(true);
           obj.setLocationRelativeTo(this);
           obj.setVisible(true);
        });
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
              java.awt.EventQueue.invokeLater(() -> {
            new AboutPage(this).setVisible(true);
        });
       
    }//GEN-LAST:event_jMenuItem3ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem logOut;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchInput;
    private javax.swing.JComboBox<String> searchType;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
